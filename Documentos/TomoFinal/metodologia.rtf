{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Cambria;\f2\ftech\fcharset77 Symbol;
}
{\colortbl;\red255\green255\blue255;\red79\green129\blue189;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\fi426\ri720\sl360\slmult1\qj

\f0\fs24 \cf0 Para este trabajo especial de grado se utilizar\'e1 una adaptaci\'f3n de la metodolog\'eda eXtreme Programming (XP) en el desarrollo de los componentes de la infraestructura. \'a0XP es una metodolog\'eda \'e1gil que permite desarrollar software a trav\'e9s de historias de usuario, programaci\'f3n en parejas, la cooperaci\'f3n \'a0del cliente y el constante uso de pruebas para garantizar que el c\'f3digo generado cumpla con sus objetivos [9]. Se utilizan iteraciones para entregar peque\'f1as versiones del software que satisfacen un conjunto de requerimientos. \
\
La siguiente ilustraci\'f3n muestra las etapas del ciclo de vida de un proyecto utilizando XP:\
\pard\pardeftab720\ri720\sa200\qc

\f1\b\fs18 \cf2 \
\pard\pardeftab720\fi720\ri720\sl360\slmult1\qj

\f0\b0\fs24 \cf0 Se empieza con las historias de usuarios, estas permiten conocer los requerimientos necesarios para cumplir con los objetivos del proyecto. Una historia de usuario es un texto breve que indica una funcionalidad del proyecto, se escriben por parte del cliente con un lenguaje natural, sin necesidad de agregar sintaxis t\'e9cnica. Las historias poseen una estimaci\'f3n de desarrollo que puede ser una, dos o tres semanas. M\'e1s de  tres semanas indica que la historia es muy compleja y debe dividirse en sub-historias, menos de una semana indica que la historia es muy simple y se debe combinar varias historias para lograr una estimaci\'f3n mayor. Las historias de usuario se enfocan en las necesidades del usuario, por ello, se debe evitar colocar algoritmos o especificaciones de alguna tecnolog\'eda. \
\
Al finalizar la elaboraci\'f3n de las historias de usuario, se crea el plan de iteraciones que divide el proyecto en partes, colocado en cada iteraci\'f3n un conjunto de historias de usuarios relacionadas.  Normalmente las iteraciones poseen una duraci\'f3n de una a tres semanas y  al finalizar la iteraci\'f3n se obtiene un entregable que el cliente debe aprobar.\
\pard\pardeftab720\ri720\sl360\slmult1\qj
\cf0 \
En cada iteraci\'f3n se logran realizar las siguientes etapas:	\
\pard\pardeftab720\li720\fi-360\ri720\sl360\slmult1\qj
\ls1\ilvl0
\f2 \cf0 \'a5	
\f0 Dise\'f1o: Se elabora el dise\'f1o de cada una de las historias de usuario que fueron acordadas en la iteraci\'f3n actual. Se crean las tarjetas CRC (clase, responsabilidad y colaboraci\'f3n) que permiten conocer que clases interactuar\'e1n en el software, est\'e1n compuestas por: Nombre de la clase, clases hijo (si aplica), responsabilidad (descripci\'f3n de los m\'e9todos) y colaboraci\'f3n (relaciones con otras clases).\
\ls1\ilvl0
\f2 \'a5	
\f0 Codificaci\'f3n: Se codifican las historias de usuarios de la iteraci\'f3n, respetando las siguientes normas: est\'e1ndares de codificaci\'f3n, creaci\'f3n de las pruebas unitarias antes que el c\'f3digo, reutilizaci\'f3n de c\'f3digo, cooperaci\'f3n del cliente.\
\ls1\ilvl0
\f2 \'a5	
\f0 Pruebas Unitarias: Se ejecutan luego de codificar las historias de usuario y deben ser exitosas para culminar la iteraci\'f3n y liberar la siguiente versi\'f3n del software.\
\pard\pardeftab720\fi360\ri720\sl360\slmult1\qj
\cf0 Al terminar la iteraci\'f3n se realizan las pruebas de aceptaci\'f3n por parte del cliente, permiten verificar si el entregable obtenido logr\'f3 cumplir con las especificaciones indicadas por las historias de usuario. En caso negativo, se debe realizar una nueva iteraci\'f3n para corregir errores o defectos que puedan haber surgido en el desarrollo, por el contrario, si el software es aceptado por el cliente se habr\'e1 liberado una versi\'f3n del software final y se continua con la siguiente iteraci\'f3n del plan de iteraciones [10].\
\
\pard\pardeftab720\fi426\ri720\sl360\slmult1\qj
\cf0 La adaptaci\'f3n de la metodolog\'eda consiste en primer lugar en establecer el plan de iteraciones de acuerdo a los componentes necesarios en la infraestructura: Cada iteraci\'f3n representa un software de la infraestructura (aplicaciones sistemas distribuidos, m\'f3dulos, agente, librer\'eda), adicionalmente se utilizar\'e1 un \'fanico programador para realizar la fase de codificaci\'f3n, por lo que se obtiene una mayor duraci\'f3n en el desarrollo de las historias de usuario debido a que una misma persona debe tener en cuenta  la legibilidad, el uso de est\'e1ndares y la optimizaci\'f3n del c\'f3digo mientras  se programa la historia de usuario.\
La elecci\'f3n de la metodolog\'eda XP se debe a que los objetivos en la elaboraci\'f3n de la infraestructura consisten en desarrollar un grupo de componentes. XP se enfoca espec\'edficamente en crear software que funcione m\'e1s all\'e1 de elaborar documentaci\'f3n extensa que no es \'fatil cuando el software no realiza su prop\'f3sito correctamente. Utilizando historias de usuario se obtienen los requerimientos de cada componente de la infraestructura de forma precisa. Mediante iteraciones se logra dividir el proyecto en partes, cada iteraci\'f3n se encuentra dirigida a un componente de la infraestructura y permite desarrollarlos de manera independiente a excepci\'f3n de las aplicaciones de sistemas distribuidos que debido a la cantidad de aplicaciones a desarrollar se dividieron en dos grupos de iteraciones. A trav\'e9s  del uso de pruebas unitarias se garantiza que cada m\'e9todo de las aplicaciones a desarrollar funciona de forma correcta y sin errores. La reutilizaci\'f3n de c\'f3digo estar\'e1 presente en los componentes de  la infraestructura pero principalmente en las aplicaciones educativas de sistemas distribuidos, donde en muchas existir\'e1n el esquema de servidor y el de cliente.\
}